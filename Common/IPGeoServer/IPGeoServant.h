// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __IPGEOSERVANT_H_
#define __IPGEOSERVANT_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
using namespace std;
#include "CommonBase.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace Common
{
    struct IPGeoReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Common.IPGeoReq";
        }
        static string MD5()
        {
            return "c8fd634c32bb72b429ee26c95c475e20";
        }
        IPGeoReq()
        :lAppid(0),lTimestamp(0),sQueryIP("")
        {
        }
        void resetDefautlt()
        {
            lAppid = 0;
            lTimestamp = 0;
            sQueryIP = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(lAppid, 0);
            _os.write(lTimestamp, 1);
            if (sQueryIP != "")
            {
                _os.write(sQueryIP, 2);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(lAppid, 0, true);
            _is.read(lTimestamp, 1, true);
            _is.read(sQueryIP, 2, false);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(lAppid,"lAppid");
            _ds.display(lTimestamp,"lTimestamp");
            _ds.display(sQueryIP,"sQueryIP");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(lAppid, true);
            _ds.displaySimple(lTimestamp, true);
            _ds.displaySimple(sQueryIP, false);
            return _os;
        }
    public:
        tars::Int64 lAppid;
        tars::Int64 lTimestamp;
        std::string sQueryIP;
    };
    inline bool operator==(const IPGeoReq&l, const IPGeoReq&r)
    {
        return l.lAppid == r.lAppid && l.lTimestamp == r.lTimestamp && l.sQueryIP == r.sQueryIP;
    }
    inline bool operator!=(const IPGeoReq&l, const IPGeoReq&r)
    {
        return !(l == r);
    }

    struct IPGeoRsp : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Common.IPGeoRsp";
        }
        static string MD5()
        {
            return "b3728697376a1934a8181438191f708d";
        }
        IPGeoRsp()
        :tStatus(Common::eOk),sDescription(""),sCountryShortName(""),sCountryFullName("")
        {
        }
        void resetDefautlt()
        {
            sDescription = "";
            sCountryShortName = "";
            sCountryFullName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write((tars::Int32)tStatus, 0);
            _os.write(sDescription, 1);
            _os.write(sCountryShortName, 2);
            _os.write(sCountryFullName, 3);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            tars::Int32 eTemp0 = Common::eOk;
            _is.read(eTemp0, 0, true);
            tStatus = (Common::ReturnCode)eTemp0;
            _is.read(sDescription, 1, true);
            _is.read(sCountryShortName, 2, true);
            _is.read(sCountryFullName, 3, true);
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display((tars::Int32)tStatus,"tStatus");
            _ds.display(sDescription,"sDescription");
            _ds.display(sCountryShortName,"sCountryShortName");
            _ds.display(sCountryFullName,"sCountryFullName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple((tars::Int32)tStatus, true);
            _ds.displaySimple(sDescription, true);
            _ds.displaySimple(sCountryShortName, true);
            _ds.displaySimple(sCountryFullName, false);
            return _os;
        }
    public:
        Common::ReturnCode tStatus;
        std::string sDescription;
        std::string sCountryShortName;
        std::string sCountryFullName;
    };
    inline bool operator==(const IPGeoRsp&l, const IPGeoRsp&r)
    {
        return l.tStatus == r.tStatus && l.sDescription == r.sDescription && l.sCountryShortName == r.sCountryShortName && l.sCountryFullName == r.sCountryFullName;
    }
    inline bool operator!=(const IPGeoRsp&l, const IPGeoRsp&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class IPGeoServantPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~IPGeoServantPrxCallback(){}
        virtual void callback_getIPGeo(tars::Int32 ret,  const Common::IPGeoRsp& rsp)
        { throw std::runtime_error("callback_getIPGeo() override incorrect."); }
        virtual void callback_getIPGeo_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getIPGeo_exception() override incorrect."); }

        virtual void callback_test(tars::Int32 ret)
        { throw std::runtime_error("callback_test() override incorrect."); }
        virtual void callback_test_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_test_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __IPGeoServant_all[]=
            {
                "getIPGeo",
                "test"
            };
            pair<string*, string*> r = equal_range(__IPGeoServant_all, __IPGeoServant_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __IPGeoServant_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getIPGeo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    Common::IPGeoRsp rsp;
                    _is.read(rsp, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getIPGeo(_ret, rsp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_test(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<IPGeoServantPrxCallback> IPGeoServantPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class IPGeoServantPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~IPGeoServantPrxCallbackPromise(){}
    public:
        struct PromisegetIPGeo: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            Common::IPGeoRsp rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< IPGeoServantPrxCallbackPromise::PromisegetIPGeo > PromisegetIPGeoPtr;

        IPGeoServantPrxCallbackPromise(const promise::Promise< IPGeoServantPrxCallbackPromise::PromisegetIPGeoPtr > &promise)
        : _promise_getIPGeo(promise)
        {}
        
        virtual void callback_getIPGeo(const IPGeoServantPrxCallbackPromise::PromisegetIPGeoPtr &ptr)
        {
            _promise_getIPGeo.setValue(ptr);
        }
        virtual void callback_getIPGeo_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getIPGeo_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getIPGeo.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< IPGeoServantPrxCallbackPromise::PromisegetIPGeoPtr > _promise_getIPGeo;

    public:
        struct Promisetest: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< IPGeoServantPrxCallbackPromise::Promisetest > PromisetestPtr;

        IPGeoServantPrxCallbackPromise(const promise::Promise< IPGeoServantPrxCallbackPromise::PromisetestPtr > &promise)
        : _promise_test(promise)
        {}
        
        virtual void callback_test(const IPGeoServantPrxCallbackPromise::PromisetestPtr &ptr)
        {
            _promise_test.setValue(ptr);
        }
        virtual void callback_test_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:test_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_test.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< IPGeoServantPrxCallbackPromise::PromisetestPtr > _promise_test;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __IPGeoServant_all[]=
            {
                "getIPGeo",
                "test"
            };

            pair<string*, string*> r = equal_range(__IPGeoServant_all, __IPGeoServant_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __IPGeoServant_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getIPGeo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    IPGeoServantPrxCallbackPromise::PromisegetIPGeoPtr ptr = new IPGeoServantPrxCallbackPromise::PromisegetIPGeo();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getIPGeo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getIPGeo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getIPGeo(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    IPGeoServantPrxCallbackPromise::PromisetestPtr ptr = new IPGeoServantPrxCallbackPromise::Promisetest();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_test(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<IPGeoServantPrxCallbackPromise> IPGeoServantPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class IPGeoServantCoroPrxCallback: public IPGeoServantPrxCallback
    {
    public:
        virtual ~IPGeoServantCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __IPGeoServant_all[]=
            {
                "getIPGeo",
                "test"
            };

            pair<string*, string*> r = equal_range(__IPGeoServant_all, __IPGeoServant_all+2, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __IPGeoServant_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getIPGeo_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        Common::IPGeoRsp rsp;
                        _is.read(rsp, 2, true);
                        setResponseContext(msg->response.context);

                        callback_getIPGeo(_ret, rsp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getIPGeo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getIPGeo_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_test_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_test(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_test_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<IPGeoServantCoroPrxCallback> IPGeoServantCoroPrxCallbackPtr;

    /* proxy for client */
    class IPGeoServantProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 getIPGeo(const Common::IPGeoReq & req,Common::IPGeoRsp &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            _os.write(rsp, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getIPGeo", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 2, true);
            return _ret;
        }

        void async_getIPGeo(IPGeoServantPrxCallbackPtr callback,const Common::IPGeoReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getIPGeo", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< IPGeoServantPrxCallbackPromise::PromisegetIPGeoPtr > promise_async_getIPGeo(const Common::IPGeoReq &req,const map<string, string>& context)
        {
            promise::Promise< IPGeoServantPrxCallbackPromise::PromisegetIPGeoPtr > promise;
            IPGeoServantPrxCallbackPromisePtr callback = new IPGeoServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getIPGeo", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getIPGeo(IPGeoServantCoroPrxCallbackPtr callback,const Common::IPGeoReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(req, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getIPGeo", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 test(const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_test(IPGeoServantPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< IPGeoServantPrxCallbackPromise::PromisetestPtr > promise_async_test(const map<string, string>& context)
        {
            promise::Promise< IPGeoServantPrxCallbackPromise::PromisetestPtr > promise;
            IPGeoServantPrxCallbackPromisePtr callback = new IPGeoServantPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_test(IPGeoServantCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"test", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        IPGeoServantProxy* tars_hash(int64_t key)
        {
            return (IPGeoServantProxy*)ServantProxy::tars_hash(key);
        }

        IPGeoServantProxy* tars_consistent_hash(int64_t key)
        {
            return (IPGeoServantProxy*)ServantProxy::tars_consistent_hash(key);
        }

        IPGeoServantProxy* tars_set_timeout(int msecond)
        {
            return (IPGeoServantProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<IPGeoServantProxy> IPGeoServantPrx;

    /* servant for server */
    class IPGeoServant : public tars::Servant
    {
    public:
        virtual ~IPGeoServant(){}
        virtual tars::Int32 getIPGeo(const Common::IPGeoReq & req,Common::IPGeoRsp &rsp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getIPGeo(tars::TarsCurrentPtr current, tars::Int32 _ret, const Common::IPGeoRsp &rsp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 test(tars::TarsCurrentPtr current) = 0;
        static void async_response_test(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __Common__IPGeoServant_all[]=
            {
                "getIPGeo",
                "test"
            };

            pair<string*, string*> r = equal_range(__Common__IPGeoServant_all, __Common__IPGeoServant_all+2, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Common__IPGeoServant_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    Common::IPGeoReq req;
                    Common::IPGeoRsp rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("req", req);
                        tarsAttr.getByDefault("rsp", rsp, rsp);
                    }
                    else
                    {
                        _is.read(req, 1, true);
                        _is.read(rsp, 2, false);
                    }
                    tars::Int32 _ret = getIPGeo(req,rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("rsp", rsp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                    }
                    else
                    {
                    }
                    tars::Int32 _ret = test(_current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
